#!/usr/bin/env bash

# The function to call in order to choose a directory of background images and
# a specific image within that directory.
BG_SCHEME=daynight

# The proportion of most-recently-selected images among which to swap mtimes, a
# float between 0 and 1. With PROPORTION_TO_SWAP=0.334 and a directory of 100
# images, on each rotation we will swap the mtime of the selected image with
# that of one of the 33 most recently selected images. Since the next image is
# always that with the oldest mtime, if mtimes are all distinct then this means
# that each rotation should result in picking an image that hasn't been
# selected in at least the last 67 rotations while also virtually guaranteeing
# some shuffling of the relative order over cycles through all images.
PROPORTION_TO_SWAP=0.4

# To run automatically, make sure the timer is installed. The systemd timer and service unit are
# put in place by rcm, so we just need to make sure those are picked up by systemd and that the
# timer is active.
#
#   systemctl --user status bgrotate.timer
#   systemctl --user daemnon-reload         // pick up new/changed timer/service
#   systemctl --user enable bgrotate.timer  // start on next boot
#   systemctl --user start bgrotate.timer   // start now

DAYTIME_DIR="${HOME}/Dropbox/Shawn/Shelf/Images/Backgrounds/Daytime"
NIGHTTIME_DIR="${HOME}/Dropbox/Shawn/Shelf/Images/Backgrounds/Nighttime"
NATURE_BASE_DIR="${HOME}/Dropbox/Shawn/Shelf/Images/Backgrounds/Nature"
PAINTINGS_DIR="${HOME}/Dropbox/Shawn/Shelf/Images/Backgrounds/Paintings"

main() {
  case "$1" in
    -h|--help) show_help ;;
    c|cur|curr|current) get_current_background ;;
    l|ls|list) list_backgrounds ;;
    ""|r|rot|rotate) rotate_background ;;
    *) echo "Unrecognized command"; exit 1 ;;
  esac
}

show_help() {
  echo "bgrotate [r[otate]]"
  echo "         c[urrent]"
  echo "         l[ist]"
}

list_backgrounds() {
  current=$(get_current_background)
  current_dir=$(dirname "$current")
  ls -ltr --time-style="+%Y-%m-%d %H:%M" "$current_dir" \
    | tail -n +2 \
    | sed -E -e "s#(\S+)\$#${current_dir}/\1#" |
    while read -a cols; do
      bg="${cols[-1]}"
      if [ "$bg" = "$current" ]; then
        echo -n "* "
      else
        echo -n "  "
      fi
      echo "${cols[@]:5}"
    done
}

get_current_background() {
  gsettings get org.gnome.desktop.background picture-uri \
    | sed -e "s/^'//" -e "s/'$//"
}

rotate_background() {
  target_bg_uri=$(select_${BG_SCHEME}_background)
  actual_bg_uri=$(get_current_background)
  if [[ "$target_bg_uri" != "$actual_bg_uri" ]]; then
    gsettings set org.gnome.desktop.background picture-uri "$target_bg_uri"
    gsettings set org.gnome.desktop.background picture-uri-dark "$target_bg_uri"
    update_mtime "$target_bg_uri"
  fi
}

select_daynight_background() {
  now=$(date "+%H")
  bg_dir=$(random_choice $DAYTIME_DIR $NIGHTTIME_DIR)
  select_background "$bg_dir"
}

random_choice() {
  local args=("$@")
  local i=$(awk -v n=$# 'BEGIN{print int(rand()*n)}')
  echo ${args[$i]}
}

select_nature_background() {
  # We don't use start_date anymore, but it was a little tricky to figure out,
  # and there's little harm in keeping it around.
  IFS=$'\t' read bg_subdir start_date < <(select_season)
  bg_dir="$NATURE_BASE_DIR/$bg_subdir"
  select_background "$bg_dir"
}

select_season() {
  today=$(date "+%m%d")
  if   [[ "$today" < "0320" || "$today" > "1220" ]]; then
    year=
    if [[ "$today" < "1221" ]]; then
      # `date` assumes the current year, which generally works for us except
      # for winter, which spans the transition between years.
      year=$(date --date "last year" "+ %Y")
    fi
    echo -e "1-Winter\tDec 21${year}"
  elif [[ "$today" < "0620" ]]; then
    echo -e "2-Spring\tMar 20"
  elif [[ "$today" < "0922" ]]; then
    echo -e "3-Summer\tJun 20"
  else
    echo -e "4-Fall\tSep 22"
  fi
}

select_painting_background() {
  select_background "$PAINTINGS_DIR"
}

select_background() {
  bg_dir="$1"
  oldest_background=$(ls -tr "$bg_dir" | head -n 1)
  if [ -z "$oldest_background" ]; then
    echo "No backgrounds found"
    exit 1
  fi
  echo "${bg_dir}/${oldest_background}"
}

update_mtime() {
  bg_uri="$1"
  bg_dir=$(dirname "$bg_uri")
  # 1. Update the current BG's mtime to the present.
  touch "$bg_uri"
  # 2. Swap its mtime with the mtime of a random BG from among a list of
  # candidates.
  n=$(get_num_swap_candidates "$bg_dir")
  if [[ "$n" > 0 ]]; then
    swap_target=$(ls -t "$bg_dir" | tail -n +2 | head -n "$n" | select_random)
    swap_modification_times "$bg_uri" "${bg_dir}/${swap_target}"
  fi
}

get_num_swap_candidates() {
  bg_dir="$1"
  n=$(ls "$bg_dir" | wc -l)
  echo - | awk \
    -v n=$n \
    -v proportion_to_swap=$PROPORTION_TO_SWAP \
    '{print int((n-1)*proportion_to_swap)}'
}

select_random() {
  sort -R | head -n1
}

swap_modification_times() {
  file_a="$1"
  file_b="$2"
  a_mtime=$(stat -c "%y" "$file_a")
  touch -r "$file_b" "$file_a"
  touch --date="$a_mtime" "$file_b"
}

main "$@"
