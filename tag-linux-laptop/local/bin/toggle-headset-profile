#!/usr/bin/env bash

set -euo pipefail

NAME=toggle-headset-profile
BT_ID="98:47:44:80:83:61"
BT_CARD="bluez_card.98_47_44_80_83_61"
BT_INPUT="bluez_input.98_47_44_80_83_61"
HEADSET_PROFILE=headset-head-unit-msbc
A2DP_PROFILE=a2dp-sink-sbc_xq

gui_mode=false

#: Usage: toggle-headset-profile [-g]
#:
#: -g --gui  Display a gui with the current profile and ability to change it
main() {
  parse_args "$@"

  local card_section current_profile available_profiles

  card_section=$(list_cards | get_card_section)
  if [ -z "$card_section" ]; then
    warn "$BT_CARD not found."
    exit 1
  fi

  current_profile=$(get_active_profile <<<"$card_section")
  available_profiles=($A2DP_PROFILE $HEADSET_PROFILE)

  if [ "$gui_mode" = true ]; then
    handle_gui "$current_profile" "${available_profiles[@]}"
  else
    toggle_profile "$current_profile"
  fi
}

parse_args() {
  local shortopts=hg
  local longopts=help,gui
  TEMP=$(getopt -o $shortopts --long $longopts -n "$NAME" -- "$@")
  if [ $? != 0 ]; then echo "failed to parse options" >&2; exit 1; fi

  eval set -- "$TEMP"
  while true; do
    case "$1" in
      -h | --help) print_help; exit; shift ;;
      -g | --gui) gui_mode=true; shift ;;
      --) shift; break ;;
      *) echo "error parsing options"; exit 1 ;;
    esac
  done
}

list_cards() {
  pactl list cards
}

# Extract the section corresponding to the Bluetooth card.
get_card_section() {
  awk -v card="$BT_CARD" '/Name:/{p=0} /Name: '"$BT_CARD"'/{p=1} p'
}

get_active_profile() {
  awk '/Active Profile:/ {print $3}'
}

# Handle the graphical user interface with rofi
handle_gui() {
  local current_profile="$1"; shift
  local profiles=("$@")
  local selected_profile= output=

  for i in "${!profiles[@]}"; do
    [ "${profiles[$i]}" = "$current_profile" ] && break;
  done
  selected_profile=$(printf "%s\n" "${profiles[@]}" |
    rofi -dmenu -p "Select Profile" -no-custom -selected-row "$i" -a "$i")

  if [ -n "$selected_profile" ] && [ "$current_profile" != "$selected_profile" ]; then
    output=$(set_profile "$selected_profile") || {
      warn "$output"
      return 1
    }
  fi
}

# Toggle the profile; if we don't recognize the current profile, default to the headset (with mic).
toggle_profile() {
  local current_profile="$1" profile= output=
  if [ "$current_profile" = "$HEADSET_PROFILE" ]; then
    profile="$A2DP_PROFILE"
  else
    profile="$HEADSET_PROFILE"
  fi

  output=$(set_profile "$profile") || {
    warn "$output"
    return 1
  }
  log "$output"
}

# Set the given profile
set_profile() {
  local new_profile="$1"
  local set_profile_output= set_input_source_output=

  echo -n "Setting profile to $new_profile… "
  set_profile_output=$(pactl_set_card_profile "$new_profile") \
    || { reconnect_bluetooth && set_profile_output=$(pactl_set_card_profile "$new_profile"); } \
    || { echo "$set_profile_output"; return 1; }
  echo "Done"

  if [ "$new_profile" = "$HEADSET_PROFILE" ]; then
    echo -n "Setting default input… "
    set_input_source_output=$(set_input_source_to_headset) || {
      echo "$set_input_source_output"
      return 1
    }
    echo "Done"
  fi
}

pactl_set_card_profile() {
  local new_profile="$1"
  pactl set-card-profile "$BT_CARD" "$new_profile" 2>&1
}

reconnect_bluetooth() {
  bluetoothctl disconnect $BT_ID && bluetoothctl connect $BT_ID
}

set_input_source_to_headset() {
  local source_name=$(pactl list short sources | grep "$BT_INPUT" | awk '{print $2}')
  if [ -n "$source_name" ]; then
    echo "$source_name"
    pactl set-default-source "$source_name"
  else
    echo "No input source for headset"
    return 1
  fi
}

print_help() {
  sed -nE -e '/^#:/ {s/#: ?//; p}' "${BASH_SOURCE[0]}"
}

log() {
  if [ "$gui_mode" = true ]; then
    rofi -e "$1"
  else
    echo "$1";
  fi
}

warn() { log "$1" 1>&2; }

main "$@"
