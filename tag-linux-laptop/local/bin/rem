#!/usr/bin/env bash

set -ueo pipefail

shopt -s extglob

REM_STATE_FILE=${REM_STATE_FILE:-"$HOME"/.local/var/rem.state}
REM_DEFAULT_MSG=${REM_DEFAULT_MSG:-"Wake up, Neoâ€¦"}
REM=$(realpath "$0")

FULL_DATE_FORMAT="+%Y-%m-%dT%H:%M:%S"
AT_DATE_FORMAT="+%H:%M %Y-%m-%d"

# rem 5m
# rem 5m Time to go
# rem 15:59
# rem 1h
# rem 1h5m
# rem 75m
# rem [status]
# rem del[ete] REMINDER_ID
main() {
  case "${1:-}" in
    ""|-*) show_status "$@" ;;
    s|st|stat|status) shift; show_status "$@" ;;
    [1-9]*([0-9])m) add_reminder_m "$@" ;;
    [1-9]*([0-9])h) add_reminder_h "$@" ;;
    [1-9]*([0-9])h@([1-9]|[1-5][0-9])m) add_reminder_hm "$@" ;;
    @(?(0)[0-9]|1[0-9]|2[0-3])[:h][0-5][0-9]) add_reminder_time "$@" ;;
    pop) shift; pop_reminder "$@" ;;
    d|del|delete) shift; delete_reminder "$@" ;;
  esac
}

show_status() {
  local curr_state
  if [ ! -t 0 -o "${1:-}" = "-g" ]; then
    _get_status | _display_gui_status
  else
    # We're in an interactive shell, so display text.
    _get_status
  fi
}

_get_status() {
  while IFS=$'\t' read jobid datetime msg; do
    local display_time
    display_time=$(date -d "$datetime" "+%H:%M")
    time_left=$(_time_until "$datetime")
    printf "%d\t%s\t%s\t%s\n" "$jobid" "$display_time" "$time_left" "$msg"
  done < <(_update_state)
}

_time_until() {
  local endtime="$1"
  local delta n
  delta=$(_seconds_until "$endtime")
  if [ "$delta" -lt 60 ]; then
    echo "${delta}s"
    return
  fi
  if [ "$delta" -ge 3600 ]; then
    n=$(($delta / 3600))
    echo -n "${n}h"
    delta=$(($delta - ($n * 3600)))
  fi
  if [ "$delta" -ge 60 ]; then
    n=$(($delta / 60))
    echo -n "${n}m"
    delta=$(($delta - ($n * 60)))
  fi
  if [ "$n" -le 5 ]; then
    echo -n "${delta}s"
  fi
  echo
}

_seconds_until() {
  local endtime="$1"
  local now
  now=$(date "+%s")
  endtime=$(date -d "$endtime" "+%s")
  echo $(("$endtime" - "$now"))
}

_display_gui_status() {
  sed -e 's/^/0\t/' \
    | tr "\t" "\n" \
    | zenity \
      --list --checklist \
      --text='' \
      --column=Delete --column=Id --column=At --column=Left --column=Message \
      --width=500 \
      2>/dev/null \
    | _delete_jobs
}

_delete_jobs() {
  local deleted=
  while read jobid; do
    atrm "$jobid"
    deleted=1
  done < <(tr '|' "\n")
  if [ -n "$deleted" ]; then
    show_status
  fi
}

_update_state() {
  _lock_state_file -x
  local new_state_file
  new_state_file=$(mktemp --tmpdir rem.state.XXX)
  join -t $'\t' -j1 <(sort "$REM_STATE_FILE") <(atq | cut -f1 | sort) \
    | sort -k2,3 >"$new_state_file"
  mv "$new_state_file" "$REM_STATE_FILE"
  cat "$REM_STATE_FILE"
  _unlock_state_file
}

add_reminder_m() {
  local m="${1%m}"; shift
  local datetime
  datetime=$(date -d "now + ${m} minute" "$FULL_DATE_FORMAT")
  _add_reminder_datetime "$datetime" "$@"
}

add_reminder_h() {
  local h="${1%h}"; shift
  local datetime
  datetime=$(date -d "now + ${h} hour" "$FULL_DATE_FORMAT")
  _add_reminder_datetime "$datetime" "$@"
}

add_reminder_hm() {
  [[ "$1" =~ ([0-9]+)h([0-9]+)m ]]; shift
  local h="${BASH_REMATCH[1]}"
  local m="${BASH_REMATCH[2]}"
  local datetime
  datetime=$(date -d "now + ${h} hour + ${m} minute" "$FULL_DATE_FORMAT")
  _add_reminder_datetime "$datetime" "$@"
}

add_reminder_time() {
  local t="$1"; shift
  local datetime=$(date -d "${t/h/:}" "$FULL_DATE_FORMAT")
  _add_reminder_datetime "$datetime" "$@"
}

_add_reminder_datetime() {
  local datetime="$1"; shift
  local msg="$*"
  local at_datetime
  if [ -n "$msg" ]; then
    msg=$(printf "%q" "$msg")
  else
    msg="$REM_DEFAULT_MSG"
  fi
  at_datetime=$(date -d "$datetime" "$AT_DATE_FORMAT")
  cmd="DISPLAY=${DISPLAY} ${REM} pop ${datetime} ${msg}"
  echo "$cmd"
  # Example `at` output (goes to standard error):
  # warning: commands will be executed using /bin/sh
  # job 8 at Tue Apr 20 17:20:00 2021
  at -M "$at_datetime" <<<"$cmd" 2>&1 | while read line; do
    if [[ "$line" =~ ^job\ ([0-9]+) ]]; then
      local job="${BASH_REMATCH[1]}"
      _lock_state_file -x
      echo -e "${job}\t${datetime}\t${msg}" >>"$REM_STATE_FILE"
      _unlock_state_file
    fi
  done
  show_status
}

pop_reminder() {
  local datetime="$1"; shift
  local msg="$*"
  local remaining_seconds msg_time
  if [ -z "$msg" ]; then
    msg="$REM_DEFAULT_MSG"
  fi
  remaining_seconds=$(_seconds_until "$datetime")
  if [ "$remaining_seconds" -gt "0" ]; then
    sleep "$remaining_seconds"
  fi
  msg_time=$(date -d "$datetime" "+%H:%M")
  notify-send -u normal "$msg" "$msg_time"
}

delete_reminder() {
  local jobid="${1:-}"
  if [[ "$jobid" =~ [1-9][0-9]* ]]; then
    atrm "$jobid"
  fi
  show_status
}

_lock_state_file() {
  exec 4<>"$REM_STATE_FILE"
  flock "$@" 4
}

_unlock_state_file() {
  exec 4>&-
}

main "$@"
