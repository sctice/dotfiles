# Functions

# Expands simple text tokens in the passed-in string into a prompt
# specification suitable for setting as PS1, PS2, and so on. For window and tab
# titles: the tab title follows '\e]1;', the window title follows '\e]2;', and
# '\a' ends a title.
expand_prompt() {
  read -r -d '' script <<-'EOF'
	{
	  s/<WIN>/\\[\\e]1;\\u@\\h\\a\\e]2;\\a\\]/g
	  s/<NUL>/\\[\\033[0m\\]/g
	  s/<FG>/\\[\\033[m\\]/g
	  s/<\([^>]*\)>/\\[\\033[\1\\]/g
	}
	EOF

  sed -e "$script" <<<"$1"
}

# Exports

# Set the main and continuation prompts. The <WIN> business sets window and tab
# titles with each new prompt. We do this because systems often do this
# differently, and we'd like the same style across terminal tabs when some are
# local and others are connected to a remote host.
export MY_PS1=$(expand_prompt '<WIN><32m>\A <33m>\u<35m>@<33m>\h <34m>\W <1;31m>[\j] <FG>❯<NUL> ')
export PS1="$MY_PS1"
export MY_PS2=$(expand_prompt '<33m>...<FG>❯<NUL> ')
export PS2="$MY_PS2"

# Explicitly set the editor so git (and others) will use our own vim.
export EDITOR=$(which vim)

# Make less process control characters, quit if the input is less than a screen
# full, not clear the screen initially, and always wrap long lines.
export PAGER='less'
export LESS='-R -F -X -+S'

# Tell GPG about our interactive TTY so that it can prompt us.
export GPG_TTY=$(tty)

source $HOME/.local/etc/fzf.sh
source $HOME/.local/etc/z.sh

# For some reason probably related to login versus non-login shells, tmux
# doesn't get bash completion enabled by default.
bash_completion=/etc/bash_completion
if [ -r "$bash_completion" ]; then
  . "$bash_completion"
fi

# Aliases

alias ll='ls -l'

# vim: sw=2 ts=2 sts=2 ft=bash
