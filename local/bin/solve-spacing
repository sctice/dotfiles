#!/usr/bin/env python3

import argparse
import sys
from typing import List, Optional


def solve_spacing(
    extent: float,
    n: Optional[int] = None,
    pad: Optional[float] = None,
    margin: Optional[float] = None,
    objects: Optional[List[float]] = None
):
    if objects is None:
        if n is None:
            raise ValueError("either number of objects or object sizes must be specified")
        objects = [0] * n
    else:
        n = len(objects)

    user_specified_pad = pad
    user_specified_margin = margin

    if n == 1:
        pad = user_specified_pad = 0
    elif pad is None:
        pad = 0

    if margin is None:
        margin = pad

    total_object_size = sum(objects)
    total_padding = pad * (n - 1) if n > 1 else 0
    total_margin = 2 * margin
    available_space = extent - total_padding - total_margin

    if total_object_size == 0:
        # Solve for object size
        object_size = available_space / n
        objects = [object_size] * n
    else:
        # Distribute remaining space between objects and container
        remaining_space = available_space - total_object_size
        equal_space_per_gap = remaining_space / (n + 1)
        if user_specified_margin is None and user_specified_pad is None:
            pad = margin = equal_space_per_gap
        elif user_specified_margin is None:
            margin = remaining_space / 2
        elif user_specified_pad is None:
            pad = remaining_space / (n - 1) if n > 1 else 0

    positions = [margin]
    for i, obj in enumerate(objects):
        if i > 0:
            positions.append(positions[-1] + objects[i-1] + pad)

    return {
        "extent": extent,
        "objects": objects,
        "positions": positions,
        "pad": pad,
        "margin": margin
    }


def main():
    parser = argparse.ArgumentParser(description="Solve object alignment")
    parser.add_argument("-e", "--extent", type=float, required=True, help="Container extent")
    parser.add_argument("-n", type=int, help="Number of objects")
    parser.add_argument("-p", "--pad", type=float, help="Padding between objects")
    parser.add_argument("-m", "--margin", type=float, help="Margin between objects and container")
    parser.add_argument("-o", "--obj", type=float, action="append", help="Size of single object")

    args = parser.parse_args()

    try:
        result = solve_spacing(args.extent, args.n, args.pad, args.margin, args.obj)
    except ValueError as e:
        print(f"error: {str(e)}", file=sys.stdout)
        sys.exit(1)

    print(f"extent    = {result['extent']}")
    print(f"objects   = {result['objects']}")
    print(f"positions = {result['positions']}")
    print(f"padding   = {result['pad']}")
    print(f"margin    = {result['margin']}")


if __name__ == "__main__":
    main()
