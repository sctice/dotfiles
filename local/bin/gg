#!/usr/bin/env ruby

require 'shellwords'
require 'set'
require 'open3'

# A curated list of git-grep options that take arguments (so we can avoid
# treating the option argument as a gg argument).
OPTS_WITH_ARGS = Set.new [
  '--max-depth',
  '-C', '--context',
  '-A', '--after-context',
  '-B', '--before-context',
  '-f'
]

# A helper program to reject results according to a user-configured list of
# patterns to ignore. May not exist, so we check for it before running it.
SQUELCH = 'squelch'

def usage(status)
  puts <<-EOT
Usage:
  gg --raw GITGREP_OPT...
  gg [GITGREP_OPT...] PATTERN [--] [PATH...]

Description:
  Each GITGREP_OPT is passed through to git-grep unmodified.
  EOT
  exit status
end

def main
  argv = ARGV.dup

  usage(1) if argv.empty? || argv.any? { |a| ['-h', '--help'].include?(a) }

  # For --raw, do minimal processing.
  if argv.delete('--raw')
    exit raw_git_grep(argv)
  end

  # Treat everything after '--' as an argument to this command (gg).
  sep_index = argv.rindex('--')
  if !sep_index.nil?
    our_explicit_args = argv.slice!(sep_index, argv.length)
    our_explicit_args.shift # throw away the '--'
  else
    our_explicit_args = []
  end

  # Extract the arguments to this command, which start after the last option.
  last_opt_index = argv.rindex { |arg| arg.start_with?('-') }
  if !last_opt_index.nil?
    # The git-grep option may or may not take an argument.
    last_opt = argv[last_opt_index]
    last_opt_len = OPTS_WITH_ARGS.include?(last_opt) ? 2 : 1
    our_arg_start = last_opt_index + last_opt_len
  else
    # No git-grep options, so all args belong to us.
    our_arg_start = 0
  end

  our_args = argv.slice!(our_arg_start, argv.length) + our_explicit_args

  # Everything between 'gg' and the pattern (which is what's left after the
  # above processing) is a git-grep option.
  gitgrep_args = argv

  if our_args.empty?
    warn "No pattern"
    usage 1
  end

  pattern, *pathspecs = our_args
  pathspecs << '.' if pathspecs.empty?

  # Pass any squelch definitions as extra pathspecs that exclude matching
  # paths.
  if command_exists?(SQUELCH)
    squelch_patterns, status = Open3.capture2(SQUELCH, '--list-git')
    pathspecs += squelch_patterns.each_line.map { |l| l.chomp }
  end

  # -I (don't search binary files) has no long name.
  cmd = build_command([
    'git', 'grep',
    '-I',
    '--line-number',
    '--no-index',
    git_force_color,
    gitgrep_args,
    '-e', pattern,
    '--', pathspecs
  ])

  exec(*cmd)
end

def raw_git_grep(gitgrep_args)
  gitgrep_cmd = build_command(['git', 'grep', git_force_color, gitgrep_args])
  if command_exists?(SQUELCH)
    statuses = Open3.pipeline(gitgrep_cmd, SQUELCH)
    error_status = statuses.find { |s| !s.success? }
    error_status ? error_status.exitstatus : 0
  else
    system(gitgrep_cmd)
  end
end

def build_command(cmd)
  cmd.flatten.reject { |a| a.empty? }
end

def git_force_color
  # Only force colors if the output is a terminal
  STDOUT.tty? ? '--color=always' : ''
end

def command_exists?(cmd_name)
  # Don't need the standard output; just the status. 'command' is a POSIX shell
  # builtin that's only sometimes available as an executable, so we run it
  # through a subshell.
  _, status = Open3.capture2('sh', '-c', "command -v #{cmd_name}")
  status.success?
end

main
