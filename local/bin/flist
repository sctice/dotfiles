#!/usr/bin/env ruby

require 'optparse'
require 'open3'

Options = Struct.new(:roots, :hidden, :all, :exts, :find_args)

def main
  begin
    options = parse_options
    list_by_find(options)
  rescue Interrupt
  end
end

def parse_options
  options = Options.new
  options.roots = []
  options.hidden = false
  options.all = false
  options.exts = nil
  options.find_args = nil

  op = OptionParser.new do |opts|
    opts.banner = "usage: #{opts.program_name} [DIR...] [-aA] [-x EXTS] "\
      "[FIND_ARGS...]"

    opts.separator ''
    opts.separator 'options:'

    opts.on('-a', '--hidden',
            'Do not exclude hidden files.') do
      options.hidden = true
    end

    opts.on('-A', '--all',
            'Exclude nothing (i.e., do not filter with "squelch").') do
      options.all = true
    end

    opts.on('-x', '--exts [EXTS]', Array,
            'Limit files by a set of comma-separated extensions.') do |exts|
      exts = exts.nil? ? [] : exts.select {|x| !x.nil? && x.length > 0}
      options.exts = exts if exts.length > 0
    end

    opts.on('-h', '--help',
            'Print this help.') do
      puts opts
      exit
    end
  end

  find_args = []

  begin
    op.order! do |r|
      # Find expressions can start with '(' or '!', which don't like like
      # arguments, but aren't roots.
      if ['(', '!'].index(r).nil?
        options.roots << r
      else
        find_args << r
      end
    end
  rescue OptionParser::InvalidOption => e
    e.recover(ARGV)
  rescue OptionParser::ParseError => e
    abort "#{e}\n#{op.banner}"
  end

  options.find_args = find_args + ARGV.dup if ARGV.length > 0
  options
end

def list_by_find(options)
  options.roots << '.' if options.roots.length == 0
  find_cmd = ['find'] << options.roots << ['-mindepth', '1']
  add_squelch_criteria(find_cmd, options.hidden) unless options.all
  add_extension_criteria(find_cmd, options.exts)
  find_cmd << '('
  if options.find_args
    find_cmd << options.find_args
  else
    find_cmd << ['-type', 'f', '-or', '-type', 'l']
  end
  find_cmd << [')', '-print']
  find_cmd.flatten!
  Open3.pipeline(find_cmd)
end

def add_squelch_criteria(find_cmd, hidden)
  squelch_cmd = ['squelch', '--list-regex']
  squelch_cmd << '--hidden' if hidden
  squelch_s, status = Open3.capture2(*squelch_cmd)
  rxs = squelch_s.each_line.map {|l| ['-name', l.chomp]}
  return if rxs.length == 0
  find_cmd << ['(', intersperse('-or', rxs).to_a, ')', '-prune', '-or']
end

def add_extension_criteria(find_cmd, exts)
  return unless exts
  exts = intersperse('-or', exts.map {|x| ['-name', "*.#{x}"]}).to_a
  find_cmd << ['('] << exts << [')']
end

def intersperse(op, xs)
  return enum_for(:intersperse, op, xs) unless block_given?
  xs.each_with_index do |x, i|
    yield op if i > 0
    yield x
  end
end

main if __FILE__ == $PROGRAM_NAME
